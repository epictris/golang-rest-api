// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/api/init.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/epictris/go/gen/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ServiceName is the fully-qualified name of the Service service.
	ServiceName = "api.Service"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ServiceCreateUserProcedure is the fully-qualified name of the Service's CreateUser RPC.
	ServiceCreateUserProcedure = "/api.Service/CreateUser"
	// ServiceGetUserProcedure is the fully-qualified name of the Service's GetUser RPC.
	ServiceGetUserProcedure = "/api.Service/GetUser"
)

// ServiceClient is a client for the api.Service service.
type ServiceClient interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
}

// NewServiceClient constructs a client for the api.Service service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	serviceMethods := v1.File_proto_api_init_proto.Services().ByName("Service").Methods()
	return &serviceClient{
		createUser: connect.NewClient[v1.CreateUserRequest, v1.CreateUserResponse](
			httpClient,
			baseURL+ServiceCreateUserProcedure,
			connect.WithSchema(serviceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+ServiceGetUserProcedure,
			connect.WithSchema(serviceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// serviceClient implements ServiceClient.
type serviceClient struct {
	createUser *connect.Client[v1.CreateUserRequest, v1.CreateUserResponse]
	getUser    *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
}

// CreateUser calls api.Service.CreateUser.
func (c *serviceClient) CreateUser(ctx context.Context, req *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUser calls api.Service.GetUser.
func (c *serviceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// ServiceHandler is an implementation of the api.Service service.
type ServiceHandler interface {
	CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error)
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
}

// NewServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewServiceHandler(svc ServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	serviceMethods := v1.File_proto_api_init_proto.Services().ByName("Service").Methods()
	serviceCreateUserHandler := connect.NewUnaryHandler(
		ServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(serviceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	serviceGetUserHandler := connect.NewUnaryHandler(
		ServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(serviceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.Service/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ServiceCreateUserProcedure:
			serviceCreateUserHandler.ServeHTTP(w, r)
		case ServiceGetUserProcedure:
			serviceGetUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedServiceHandler struct{}

func (UnimplementedServiceHandler) CreateUser(context.Context, *connect.Request[v1.CreateUserRequest]) (*connect.Response[v1.CreateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Service.CreateUser is not implemented"))
}

func (UnimplementedServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.Service.GetUser is not implemented"))
}
